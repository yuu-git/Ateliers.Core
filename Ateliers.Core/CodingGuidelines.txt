******************************************************
*   簡易コーディングガイドライン
******************************************************

# このガイドラインについて

・これはガイドラインは .txt ファイルによる簡易的なものであるため、より詳細な情報は GitHub の Wiki を参照すること。
　=> URL: https://github.com/yuu-git/Ateliers.Core/Wiki
・コード全体的な決めごとや作法は、上記に記載するものとする。（『パスカルかキャメルか』や『レイヤー設計』および実装例など）

# プロジェクトについて

・オープンソース、MITライセンス、C#ベース
・GitHub によるソースコード管理
　=> URL: https://github.com/yuu-git/Ateliers.Core
・基本的なドメイン駆動の設計は、Microsoft社のガイドラインを参考とする。
　=> URL: https://learn.microsoft.com/ja-jp/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice

# アセンブリについて

  Ateliers.Core.DomainLayer

・空間 Ateliers.Core は ateliers.dev ドメインにおける全てのプロジェクトに適用する中核である事を示す。
・空間 Ateliers.Core.DomainLayer は Ateliers.Core のドメイン駆動設計におけるドメイン層である事を示す。


// === プログラム構成 ======================================================================================================================== //

+ --------------------------------------------------------------------------------------------------------------------------------------------- +

　ソース格納フォルダ: Ateliers.Core.DomainLayer.Aggregates
　推奨ネームスペース: Ateliers.Core.DomainLayer

+ --------------------------------------------------------------------------------------------------------------------------------------------- +

    【概要】
     ・ドメイン駆動におけるドメインレイヤーの集約

    【許可】
     〇 Aggregat の参照および実装
     〇 Entity の参照および実装
     〇 ValueObject の参照および実装

    【不許可】
     ―現在は特記事項なし

    【推奨事項】
     ◇ 最も基本となる基底クラス AggregateBase を継承し、抽象メソッドの実装を行う。
     ◇ RDB や JSON など、永続として保存される事を念頭に、アノテーションの記載を推奨する。
     
    【非推奨事項】　※絶対に不可ではないが、可能な限り代替案を模索し、検討すること。 
     △ 一意のキー変更
     △ 複合キー

    【制約事項】
     ＊ IAggregat インタフェースの実装は必須。
     ＊ バリデーションの実装は必須。
     ＊ 一意性を確認するためのキーの実装は必須。
     ＊ 等値確認はキーの一致のみを条件とすること。
     ＊ bool値 IsTransient (一時的である) を実装し、永続化されているかの確認が取れること。
     ＊ bool値 IsDirty (変更管理) を実装し、エンティティに更新があったかの確認が取れること。
     ＊ bool値 IsDirty (変更管理) は、内包される Entity および ValueObject の変更も担保すること。
     ＊ 内包される Entity および ValueObject の整合性およびバリデーションを担保すること。

     【参考情報およびコメント】
     ＋ AIプロンプトキーワード： 『ドメイン駆動設計』『DDD』『集約』『Aggregate』『C#のアノテーション』
     ＋ プロパティなどでルート集約であるかを確認する手段は不要。（別集約で使われた際に修正する必要があり、影響が大きいため）

+ --------------------------------------------------------------------------------------------------------------------------------------------- +

　ソース格納フォルダ: Ateliers.Core.DomainLayer.Entities
　推奨ネームスペース: Ateliers.Core.DomainLayer

+ --------------------------------------------------------------------------------------------------------------------------------------------- +

    【概要】
     ・ドメイン駆動におけるドメインレイヤーのエンティティ

    【許可】
     〇 ValueObject の参照および実装

    【不許可】
     × Aggregate の参照および実装
     × Entity の参照および実装　　※ Entity から Entity の参照は、集約になる。 それは Aggregate で実装すること。

    【推奨事項】
     ◇ 最も基本となる基底クラス EntityBase を継承し、抽象メソッドの実装を行う。
     ◇ RDB や JSON など、永続として保存される事を念頭に、アノテーションの記載を推奨する。
     
    【非推奨事項】　※絶対に不可ではないが、可能な限り代替案を模索し、検討すること。 
     △ 一意のキー変更
     △ 複合キー

    【制約事項】
     ＊ IEntity インタフェースの実装は必須。
     ＊ バリデーションの実装は必須。
     ＊ 一意性を確認するためのキーの実装は必須。
     ＊ 等値確認はキーの一致のみを条件とすること。
     ＊ bool値 IsTransient (一時的である) を実装し、永続化されているかの確認が取れること。
     ＊ bool値 IsDirty (変更管理) を実装し、エンティティに更新があったかの確認が取れること。
     
     【参考情報およびコメント】
     ＋ AIプロンプトキーワード： 『ドメイン駆動設計』『DDD』『エンティティ』『Entity』『C#のアノテーション』

+ --------------------------------------------------------------------------------------------------------------------------------------------- +

　ソース格納フォルダ: Ateliers.Core.DomainLayer.ValueObjects
　推奨ネームスペース: Ateliers.Core.DomainLayer

+ --------------------------------------------------------------------------------------------------------------------------------------------- +

    【概要】
     ・ドメイン駆動におけるドメインレイヤーの値オブジェクト

    【許可】
     ―現在は特記事項なし

    【不許可】
     × Aggregate の参照および実装
     × Entity の参照および実装　　※ ValueObject から Entity の参照は、集約になる。 それは Aggregate で実装すること。

    【推奨事項】
     ◇ 最も基本となる基底クラス EntityBase を継承し、抽象メソッドの実装を行う。
     ◇ RDB や JSON など、永続として保存される事を念頭に、アノテーションの記載を推奨する。
     
    【非推奨事項】　※絶対に不可ではないが、可能な限り代替案を模索し、検討すること。 
     △ ValueObject から ValueObject の参照

    【制約事項】
     ＊ IValueObject インタフェースの実装は必須。
     ＊ 不変オブジェクトとして実装する。生成後のプロパティ変更は許可しない。
     ＊ 等値確認は全てのプロパティの一致を条件とすること。
     
     【参考情報およびコメント】
     ＋ AIプロンプトキーワード： 『ドメイン駆動設計』『DDD』『値オブジェクト』『ValueObject』

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ateliers.Core</name>
    </assembly>
    <members>
        <member name="T:Ateliers.DecryptSecurityException">
            <summary>
            復号セキュリティ例外
            </summary>
        </member>
        <member name="M:Ateliers.DecryptSecurityException.#ctor">
            <summary>
            復号セキュリティ例外 / コンストラクタ
            </summary>
        </member>
        <member name="M:Ateliers.DecryptSecurityException.#ctor(System.String)">
            <summary>
             復号セキュリティ例外 / コンストラクタ
            </summary>
            <param name="message"> 例外メッセージを指定します。 </param>
        </member>
        <member name="M:Ateliers.DecryptSecurityException.#ctor(System.String,System.Exception)">
            <summary>
            復号セキュリティ例外 / コンストラクタ
            </summary>
            <param name="message"> 例外メッセージを指定します。 </param>
            <param name="innerException"> 内部例外を指定します。 </param>
        </member>
        <member name="T:Ateliers.DateTimeExtensions">
            <summary>
            日時型(<see cref="T:System.DateTime"/>) 拡張メソッド
            </summary>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetNextDay(System.DateTime)">
            <summary>
            翌日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 翌日の日付を返します。時刻は00:00に設定します。 日付が <see cref="F:System.DateTime.MaxValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetNextMonday(System.DateTime)">
            <summary>
            次週の月曜日を取得します。引数の日付が既に月曜日の場合、翌週の月曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 次週の月曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MaxValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetNextTuesday(System.DateTime)">
            <summary>
            次週の火曜日を取得します。引数の日付が既に火曜日の場合、翌週の火曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 次週の火曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MaxValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetNextWednesday(System.DateTime)">
            <summary>
            次週の水曜日を取得します。引数の日付が既に水曜日の場合、翌週の水曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 次週の水曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MaxValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetNextThursday(System.DateTime)">
            <summary>
            次週の木曜日を取得します。引数の日付が既に木曜日の場合、翌週の木曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 次週の木曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MaxValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetNextFriday(System.DateTime)">
            <summary>
            次週の金曜日を取得します。引数の日付が既に金曜日の場合、翌週の金曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 次週の金曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MaxValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetNextSaturday(System.DateTime)">
            <summary>
            次週の土曜日を取得します。引数の日付が既に土曜日の場合、翌週の土曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 次週の土曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MaxValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetNextSunday(System.DateTime)">
            <summary>
            次週の日曜日を取得します。引数の日付が既に日曜日の場合、翌週の日曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 次週の日曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MaxValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetPreviousDay(System.DateTime)">
            <summary>
            前日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 前日の日付を返します。 日付が <see cref="F:System.DateTime.MinValue"/> の場合、そのまま返します。時刻は00:00に設定します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetPreviousMonday(System.DateTime)">
            <summary>
            前週の月曜日を取得します。引数の日付が既に月曜日の場合、翌週の月曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 前週の月曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MinValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetPreviousTuesday(System.DateTime)">
            <summary>
            前週の火曜日を取得します。引数の日付が既に火曜日の場合、翌週の火曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 前週の火曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MinValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetPreviousWednesday(System.DateTime)">
            <summary>
            前週の水曜日を取得します。引数の日付が既に水曜日の場合、翌週の水曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 前週の水曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MinValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetPreviousThursday(System.DateTime)">
            <summary>
            前週の木曜日を取得します。引数の日付が既に木曜日の場合、翌週の木曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 前週の木曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MinValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetPreviousFriday(System.DateTime)">
            <summary>
            前週の金曜日を取得します。引数の日付が既に金曜日の場合、翌週の金曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 前週の金曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MinValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetPreviousSaturday(System.DateTime)">
            <summary>
            前週の土曜日を取得します。引数の日付が既に土曜日の場合、翌週の土曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 前週の土曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MinValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetPreviousSunday(System.DateTime)">
            <summary>
            前週の日曜日を取得します。引数の日付が既に日曜日の場合、翌週の日曜日を取得します。
            </summary>
            <param name="self"> 判定する基準となる日時（自身） </param>
            <returns> 前週の日曜日の日付を返します。時刻は00:00に設定します。日付が <see cref="F:System.DateTime.MinValue"/> の場合、そのまま返します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetNextWeekOfDate(System.DateTime,System.DayOfWeek)">
            <summary>
            翌週の指定された曜日に該当する日付を取得します。
            </summary>
            <param name="baseDate"> 基準となる日付を指定します。 </param>
            <param name="targetDayOfWeek"> 取得する対象の曜日を指定します。 </param>
            <returns> 結果の日付を返します。 時刻は00:00に設定します。 </returns>
        </member>
        <member name="M:Ateliers.DateTimeExtensions.GetPreviousWeekOfDate(System.DateTime,System.DayOfWeek)">
            <summary>
            前週の指定された曜日に該当する日付を取得します。
            </summary>
            <param name="baseDate"> 基準となる日付を指定します。 </param>
            <param name="targetDayOfWeek"> 取得する対象の曜日を指定します。 </param>
            <returns> 結果の日付を返します。 時刻は00:00に設定します。 </returns>
        </member>
        <member name="T:Ateliers.StringExtensions">
            <summary>
            文字列型(<see cref="T:System.String"/>) 拡張メソッド
            </summary>
        </member>
        <member name="P:Ateliers.StringExtensions.ExceptionMessage100100">
            <summary>
            <see cref="M:Ateliers.StringExtensions.SubstringLeft(System.String,System.String)"/> の検索する文字列がNULL指定された場合の例外メッセージを取得します。
            </summary>
        </member>
        <member name="P:Ateliers.StringExtensions.ExceptionMessage100101">
            <summary>
            <see cref="M:Ateliers.StringExtensions.SubstringLeft(System.String,System.String)"/> の検索する文字列が <see cref="F:System.String.Empty"/> に指定された場合の例外メッセージを取得します。
            </summary>
        </member>
        <member name="M:Ateliers.StringExtensions.SubstringLeft(System.String,System.String)">
            <summary>
            指定された文字列を左側から検索し、最初に一致する対象文字列より左側を取り除いた文字列を返却します。
            </summary>
            <param name="self"> 取り除きの対象となる文字列(自身) </param>
            <param name="keyStr"> 検索する(取り除く)文字列を指定します。 </param>
            <returns> 対象文字列より左側を切り取った文字列を返します。対象が見つからない場合は、そのままの文字列を返します。 </returns>
            <exception cref="T:System.ArgumentNullException"> 取り除く文字列を Null にすることはできません。 </exception>
            <exception cref="T:System.ArgumentException"> 取り除く文字列を <see cref="F:System.String.Empty"/> に指定することはできません。 </exception>
            <example>
            構文: "AAABBBCCC".SubstringLeft("A")            結果: "AABBBCCC"
            構文: "AAABBBCCC".SubstringLeft("BB")           結果: "BCCC"
            構文: "AAABBBCCC".SubstringLeft("BC")           結果: "CC"
            構文: "TESTRESULT_xxxx".SubstringLeft("_")      結果: "xxxx"
            構文: "TESTRESULT_xxxx_yyy".SubstringLeft("_")  結果: "xxxx_yyy"
            構文: "2020/06/29".SubstringLeft("/")           結果: "06/29"
            構文: "2020/06/29".SubstringLeft("A")           結果: "2020/06/29"
            </example>
        </member>
        <member name="M:Ateliers.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            文字列がNullまたは空白("", " ")であるかを確認し、結果を返却します。
            </summary>
            <param name="src"> 確認する文字列(自身) </param>
            <returns> Null または 空白 である場合は true, そうでない場合は false を返します。 </returns>
        </member>
        <member name="M:Ateliers.StringExtensions.Sanitize(System.String)">
            <summary>
            文字列が Null の場合、空白に置き換えて返却します。
            </summary>
            <param name="src"> 確認する文字列(自身) </param>
            <returns> 対象が Null の場合は <see cref="F:System.String.Empty"/>, そうでない場合はそのままの文字列を返します。 </returns>
        </member>
        <member name="T:Ateliers.EncryptService">
            <summary>
            暗号化サービス
            </summary>
        </member>
        <member name="T:Ateliers.EncryptService.RFC2898">
            <summary>
            RFC2898による暗号化と複合化
            </summary>
        </member>
        <member name="M:Ateliers.EncryptService.RFC2898.EncryptString(System.String,System.String)">
            <summary>
            ＜RFC2898＞ 文字列を暗号化して返却します。
            </summary>
            <param name="sourceString"> 暗号化する文字列を指定します。(必須) </param>
            <param name="password"> 暗号化に使用するパスワードを指定します。(必須) </param>
            <returns> 暗号化された文字列を返します。 </returns>
            <exception cref="T:System.ArgumentNullException"> 暗号化に必要な文字列またはパスワードが未指定の場合に発生します。 </exception>
        </member>
        <member name="M:Ateliers.EncryptService.RFC2898.DecryptString(System.String,System.String)">
            <summary>
            ＜RFC2898＞ ロジックで暗号化された文字列を復号して返却します。
            </summary>
            <param name="sourceString"> 暗号化された文字列を指定します。(必須) </param>
            <param name="password"> 複合に使用するパスワードを指定します。(必須) </param>
            <returns> 復号化された文字列を返します。複合化に失敗した場合は例外エラーを返します。 </returns>
            <exception cref="T:System.ArgumentNullException"> 複合化に必要な文字列またはパスワードが未指定の場合に発生します。 </exception>
            <exception cref="T:Ateliers.DecryptSecurityException"> 文字列の復号に失敗した場合に発生します。 </exception>
        </member>
        <member name="M:Ateliers.EncryptService.RFC2898.GenerateKeyFromPassword(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            ＜RFC2898＞ パスワードから共有キーと初期化ベクタを生成します。
            </summary>
            <param name="password"> 基になるパスワードを指定します。 </param>
            <param name="keySize"> 共有キーのサイズ（ビット）を指定します。 </param>
            <param name="blockSize"> 初期化ベクタのサイズ（ビット）を指定します。 </param>
            <param name="iterationCount"> 反復処理をする回数を指定します。(デフォルト: 1000 回) </param>
            <param name="salt"> セキュリティ用にランダムバイト化する文字列を指定します。 </param>
            <returns> 作成された共有キー(Key)と初期化ベクタ(Iv)を返します。 </returns>
        </member>
    </members>
</doc>
